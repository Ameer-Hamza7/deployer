version: '3.5'
services:
  # database:
  #   image: postgres:latest
  #   ports:
  #     - "6432:5432"
  #   environment:
  #     POSTGRES_USER: "postgres"
  #     POSTGRES_PASSWORD: "postgres"
  #     POSTGRES_DB: "dataanalytics_dev3"
  #   volumes:
  #     # - ../db-schema/01-init.sql:/docker-entrypoint-initdb.d/01-init.sql
  #     # - ../db-schema/02-setup-data.sql:/docker-entrypoint-initdb.d/02-setup-data.sql
  #     - dataanalytics-data:/var/lib/postgresql/data
  #   networks:
  #     - backend
  configserver:
    container_name: configserver
    image: theinnovativesolution/configserver:latest-qa
    ports:
      - "127.0.0.1:9071:9071"
    environment:
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    healthcheck:
      test: curl -f http://configserver:9071/actuator/health
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - backend
  eurekaserver:
    container_name: eureka
    image: theinnovativesolution/eurekaserver:latest-qa
    ports:
      - "9070:9070"
    healthcheck:
      test: curl -f http://eureka:9070/actuator/health
      interval: 30s
      timeout: 20s
      retries: 2
    restart: always
    depends_on:
      configserver:
        condition: service_healthy
    networks:
      - backend
  gatewayserver:
    container_name: gateway
    image: theinnovativesolution/gatewayserver:latest-qa
    ports:
      - "9072:9072"
    healthcheck:
      test: curl -f http://gateway:9072/actuator/health
      interval: 30s
      timeout: 10s
      retries: 4
    restart: always
    env_file:
      - ./.env
    environment:
      SPRING_PROFILES_ACTIVE: "qa"
      SERVER_PORT: "9072"
      CONFIGSERVER_URI: "http://configserver:9071"
      EUREKASERVER_URI: "http://eurekaserver:9070/eureka/"
      EUREKASERVER_PORT: "9070"
      CONFIGSERVER_PORT: "9071"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    networks:
      - backend
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - backend
  dataanalyticsservice:
    image: theinnovativesolution/dataanalytics:latest-qa
    container_name: dataanalytics
    env_file:
      - ./.env
    environment:
      _JAVA_OPTIONS: >
        -Xdebug
        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      SPRING_PROFILES_ACTIVE: "qa"
      CONFIGSERVER_URI: "http://configserver:9071"
      CONFIGSERVER_PORT: "9071"
      DATABASESERVER_PORT: "6432"
      ENCRYPT_KEY: "IMSYMMETRIC"
#    healthcheck:
#      test: curl -f http://dataanalytics:9080/actuator/health
#      interval: 40s
#      timeout: 10s
#      retries: 4
    restart: on-failure
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      gatewayserver:
        condition: service_healthy
    volumes:
      - /Innovativesolutions/Dataanalytics/data/:/Innovativesolutions/Dataanalytics/data/
    ports:
      - "5005:5005"
    networks:
      - backend
  registrationservice:
    image: theinnovativesolution/authservice:latest-qa
    container_name: registration
    env_file:
      - ./.env
    environment:
      SPRING_PROFILES_ACTIVE: "qa"
      CONFIGSERVER_URI: "http://configserver:9071"
      CONFIGSERVER_PORT: "9071"
      DATABASESERVER_PORT: "6432"
      ENCRYPT_KEY: "IMSYMMETRIC"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      gatewayserver:
        condition: service_healthy
    networks:
      - backend
networks:
  backend:
    name: spring_network
    external: true
volumes:
  dataanalytics-data:
